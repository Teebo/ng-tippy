{"version":3,"sources":["ng://ng-tippy/src/Tippy.service.ts","ng://ng-tippy/src/Tippy.directive.ts","ng://ng-tippy/src/Tippy.module.ts"],"names":["TippyService","Map","BehaviorSubject","prototype","setTippyState","name","state","this","_tippyTooltipStates","set","tippyTooltipStates","next","getTippyState","has","get","getAllTippies","hideTippy","popper","_tippy","hide","Injectable","args","providedIn","TippyDirective","el","tippyDirectiveService","ngOnInit","tippyOptions","tippyInstance","tippy","nativeElement","undefined","shouldObserveState","Error","tippyName","ngOnDestroy","Directive","selector","ElementRef","Input","TippyModule","forRoot","config","ngModule","providers","provide","useValue","NgModule","imports","CommonModule","declarations","exports"],"mappings":"+aAAA,IAAAA,EAAA,iDAOgC,IAAIC,4BACb,IAAIC,EAAAA,gBAAgB,IAAID,YAE7CD,EAAAG,UAAAC,cAAA,SAAcC,EAAMC,GAClBC,KAAKC,oBAAoBC,IAAIJ,EAAMC,GACnCC,KAAKG,mBAAmBC,KAAKJ,KAAKC,sBAGpCR,EAAAG,UAAAS,cAAA,SAAcP,GACZ,OAAOE,KAAKC,oBAAoBK,IAAIR,GAAQE,KAAKC,oBAAoBM,IAAIT,GAAQ,MAGnFL,EAAAG,UAAAY,cAAA,WACE,OAAOR,KAAKC,qBAGdR,EAAAG,UAAAa,UAAA,SAAUX,GACJE,KAAKC,oBAAoBK,IAAIR,IAC/BE,KAAKC,oBAAoBM,IAAIT,GAAMY,OAAOC,OAAOC,4BAtBtDC,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,gHAJd,GCAAC,EAAA,WAaE,SAAAA,EACUC,EACAC,GADAlB,KAAAiB,GAAAA,EACAjB,KAAAkB,sBAAAA,iBALE,wBACI,KAMdlB,KAAKiB,GAAKA,SAGLD,EAAApB,UAAAuB,oBACL,IAAMC,EAAepB,KAAKoB,cAAgB,GACpCC,EAAgBC,EAAMtB,KAAKiB,GAAGM,cAAeH,GAAc,GAGjE,GAFApB,KAAKqB,cAAgBA,EAEjBD,EAAatB,OAAS0B,WAAaJ,EAAaK,mBAClD,MAAM,IAAIC,MAAM,sCAEhB1B,KAAKkB,sBAAsBrB,cACzBG,KAAK2B,UACL3B,KAAKqB,gBAKJL,EAAApB,UAAAgC,uBACL5B,KAAKkB,sBAAsBrB,cACzBG,KAAK2B,UACL3B,KAAKqB,oCAlCVQ,EAAAA,UAASf,KAAA,CAAC,CACTgB,SAAU,0DALkCC,EAAAA,kBAErCtC,2CAMNuC,EAAAA,MAAKlB,KAAA,CAAC,qBART,GCAAmB,EAAA,gCAiBgBA,EAAAC,iBAAQC,GACpB,MAAO,CACLC,SAAUH,EACVI,UAAW,CACT5C,EACA,CAAE6C,QAAS,SAAUC,SAAUJ,0BAjBtCK,EAAAA,SAAQ1B,KAAA,CAAC,CACR2B,QAAS,CACPC,EAAAA,cAEFC,aAAc,CACZ3B,GAEF4B,QAAS,CACP5B,SAbJ","sourcesContent":["import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TippyService {\n  private _tippyTooltipStates = new Map();\n  tippyTooltipStates = new BehaviorSubject(new Map());\n\n  setTippyState(name, state): void {\n    this._tippyTooltipStates.set(name, state);\n    this.tippyTooltipStates.next(this._tippyTooltipStates);\n  }\n\n  getTippyState(name): any {\n    return this._tippyTooltipStates.has(name) ? this._tippyTooltipStates.get(name) : null;\n  }\n\n  getAllTippies(): any {\n    return this._tippyTooltipStates;\n  }\n\n  hideTippy(name): void {\n    if (this._tippyTooltipStates.has(name)) {\n      this._tippyTooltipStates.get(name).popper._tippy.hide();\n    }\n  }\n}\n","import { Directive, Input, OnInit, OnDestroy, ElementRef } from '@angular/core';\nimport tippy from 'tippy.js';\nimport { TippyService } from './Tippy.service';\n\n@Directive({\n  selector: '[appTippy]'\n})\nexport class TippyDirective implements OnInit, OnDestroy {\n  @Input('tippyOptions')\n  public tippyOptions: any;\n  tippyName = null;\n  tippyInstance = null;\n\n  constructor(\n    private el: ElementRef,\n    private tippyDirectiveService: TippyService\n  ) {\n    this.el = el;\n  }\n\n  public ngOnInit() {\n    const tippyOptions = this.tippyOptions || {};\n    const tippyInstance = tippy(this.el.nativeElement, tippyOptions, true);\n    this.tippyInstance = tippyInstance;\n\n    if (tippyOptions.name === undefined && tippyOptions.shouldObserveState) {\n      throw new Error('A name is required for the tooltip');\n    } else {\n      this.tippyDirectiveService.setTippyState(\n        this.tippyName,\n        this.tippyInstance\n      );\n    }\n  }\n\n  public ngOnDestroy() {\n    this.tippyDirectiveService.setTippyState(\n      this.tippyName,\n      this.tippyInstance\n    );\n  }\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { TippyDirective } from './Tippy.directive';\nimport { TippyService } from './Tippy.service';\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  declarations: [\n    TippyDirective\n  ],\n  exports: [\n    TippyDirective\n  ]\n})\nexport class TippyModule {\n  public static forRoot(config): ModuleWithProviders {\n    return {\n      ngModule: TippyModule,\n      providers: [\n        TippyService,\n        { provide: 'config', useValue: config }\n      ]\n    };\n  }\n}\n"]}