{"version":3,"sources":["ng://ng-tippy/src/Tippy.service.ts","ng://ng-tippy/src/Tippy.directive.ts","ng://ng-tippy/src/Tippy.module.ts"],"names":["TippyService","Map","BehaviorSubject","prototype","setTippyState","name","state","this","_tippyTooltipStates","set","tippyTooltipStates","next","getTippyState","has","get","getAllTippies","hideTippy","popper","_tippy","hide","Injectable","args","providedIn","TippyDirective","el","tippyDirectiveService","ngOnInit","tippyInstance","tippy","nativeElement","tippyOptions","tooltips","Directive","selector","ElementRef","Input","TippyModule","forRoot","config","ngModule","providers","provide","useValue","NgModule","imports","CommonModule","declarations","exports"],"mappings":"+aAAA,IAAAA,EAAA,iDAOgC,IAAIC,4BACb,IAAIC,EAAAA,gBAAgB,IAAID,YAE7CD,EAAAG,UAAAC,cAAA,SAAcC,EAAMC,GAClBC,KAAKC,oBAAoBC,IAAIJ,EAAMC,GACnCC,KAAKG,mBAAmBC,KAAKJ,KAAKC,sBAGpCR,EAAAG,UAAAS,cAAA,SAAcP,GACZ,OAAOE,KAAKC,oBAAoBK,IAAIR,GAAQE,KAAKC,oBAAoBM,IAAIT,GAAQ,MAGnFL,EAAAG,UAAAY,cAAA,WACE,OAAOR,KAAKC,qBAGdR,EAAAG,UAAAa,UAAA,SAAUX,GACJE,KAAKC,oBAAoBK,IAAIR,IAC/BE,KAAKC,oBAAoBM,IAAIT,GAAMY,OAAOC,OAAOC,4BAtBtDC,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,gHAJd,GCAAC,EAAA,WAWE,SAAAA,EAAoBC,EAAwBC,GAAxBlB,KAAAiB,GAAAA,EAAwBjB,KAAAkB,sBAAAA,EAC1ClB,KAAKiB,GAAKA,SAGLD,EAAApB,UAAAuB,oBACL,IAAMC,EAAgBC,EAAMrB,KAAKiB,GAAGK,cAAetB,KAAKuB,cAAgB,IAAI,GAE5EvB,KAAKkB,sBAAsBrB,cAAcG,KAAKuB,aAAazB,KAAMsB,EAAcI,SAAS,yBAd3FC,EAAAA,UAASX,KAAA,CAAC,CAETY,SAAU,0DANuBC,EAAAA,kBAE1BlC,2CAONmC,EAAAA,MAAKd,KAAA,CAAC,qBATT,GCAAe,EAAA,gCAiBgBA,EAAAC,iBAAQC,GACpB,MAAO,CACLC,SAAUH,EACVI,UAAW,CACTxC,EACA,CAAEyC,QAAS,SAAUC,SAAUJ,0BAjBtCK,EAAAA,SAAQtB,KAAA,CAAC,CACRuB,QAAS,CACPC,EAAAA,cAEFC,aAAc,CACZvB,GAEFwB,QAAS,CACPxB,SAbJ","sourcesContent":["import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TippyService {\n  private _tippyTooltipStates = new Map();\n  tippyTooltipStates = new BehaviorSubject(new Map());\n\n  setTippyState(name, state): void {\n    this._tippyTooltipStates.set(name, state);\n    this.tippyTooltipStates.next(this._tippyTooltipStates);\n  }\n\n  getTippyState(name): any {\n    return this._tippyTooltipStates.has(name) ? this._tippyTooltipStates.get(name) : null;\n  }\n\n  getAllTippies(): any {\n    return this._tippyTooltipStates;\n  }\n\n  hideTippy(name): void {\n    if (this._tippyTooltipStates.has(name)) {\n      this._tippyTooltipStates.get(name).popper._tippy.hide();\n    }\n  }\n}\n","import { Directive, Input, OnInit, ElementRef } from '@angular/core';\nimport tippy from 'tippy.js';\nimport { TippyService } from './Tippy.service';\n\n@Directive({\n  /* tslint:disable-next-line */\n  selector: '[appTippy]'\n})\nexport class TippyDirective implements OnInit {\n  @Input('tippyOptions') public tippyOptions: any;\n\n  constructor(private el: ElementRef, private tippyDirectiveService: TippyService) {\n    this.el = el;\n  }\n\n  public ngOnInit() {\n    const tippyInstance = tippy(this.el.nativeElement, this.tippyOptions || {}, true);\n\n    this.tippyDirectiveService.setTippyState(this.tippyOptions.name, tippyInstance.tooltips[0]);\n  }\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { TippyDirective } from './Tippy.directive';\nimport { TippyService } from './Tippy.service';\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  declarations: [\n    TippyDirective\n  ],\n  exports: [\n    TippyDirective\n  ]\n})\nexport class TippyModule {\n  public static forRoot(config): ModuleWithProviders {\n    return {\n      ngModule: TippyModule,\n      providers: [\n        TippyService,\n        { provide: 'config', useValue: config }\n      ]\n    };\n  }\n}\n"]}